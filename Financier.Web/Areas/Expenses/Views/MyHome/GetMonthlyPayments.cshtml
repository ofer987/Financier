<link rel="stylesheet" href="~/css/Areas/Expenses/MyHome/GetMonthlyPayments.css">

<div class="expenses">
  <div class="my-home">
    <div class="input">
      <div class="initial-cash">
        Initial Cash:&nbsp;
        <input id="initial-cash" class="decimal" />
      </div>
      <div class="initial-debt">
        Initial Debt:&nbsp;
        <input id="initial-debt" class="decimal" />
      </div>
      <div class="purchased-at">
        Purchased At:&nbsp;
        <input id="purchased-at" class="day-picker" />
      </div>
      <div class="down-payment">
        Down Payment:&nbsp;
        <input id="down-payment" class="decimal">
      </div>
      <div class="amount">
        Amount:&nbsp;
        <input id="amount" class="decimal">
      </div>
      <div class="interest-rate">
        Interest Rate:&nbsp;
        <input id="interest-rate" class="decimal" />
      </div>
      <div class="amortization">
        Amortization Period (Months):&nbsp;
        <input id="amortization" class="int" />
      </div>
      <div class="comparisons">
        <div class="compare">
          <input type="button" value="Compare" />
        </div>
      </div>
      <div class="clear">
        <input type="button" value="Clear" />
      </div>
    </div>

    <div class="results">
      <div class="fixed-rate">
      </div>

      <div class="fixed-rate-with-prepayments">
      </div>
    </div>
  </div>
</div>

<script src="~/js/jquery.min.js"></script>
<script src="~/js/jquery-ui.min.js"></script>
<!-- <script src="~/js/MonthPicker.min.js"></script> -->
<script src="~/js/apollo-client.min.js"></script>
<script src="~/js/lodash.min.js"></script>

<script type="text/javascript">
  'use strict';

  (function() {
    class Element {
      constructor(selector) {
        this.selector = selector;
      }

      getContainer() {
        return $(this.selector);
      }

      clear() {
        this.getContainer().empty();
      }
    }

    class Input extends Element {
      // TODO: inject the results component
      constructor(selector, renderPayments) {
        super(selector);

        this.purchasedAt = new DatePicker(".purchased-at input", new Date(2018, 11, 1));
        this.compareButton = new Button(".compare input", () => {
          this.initialCash = $(".initial-cash input").val();
          this.initialDebt = $(".initial-debt input").val();
          this.amount = $(".amount input").val();
          this.downPayment = $(".down-payment input").val();
          this.interestRate = $(".interest-rate input").val();
          this.amortization = $(".amortization input").val();

          this.request((data) => {
            var results = new Payments(".results .fixed-rate", data);

            renderPayments(results);
          });
        });

        this.clearButton = new Button(".clear input", () => {
          new Payments(".results", []).clear();
        });
      }

      render() {
        this.purchasedAt.render();
      }

      clear() {
        // this.dates.clear();
      }

      // getFromDate() {
      //   return this.dates.from();
      // }
      //
      // getToDate() {
      //   return this.dates.to();
      // }

      request(render) {
        var client = new Apollo.lib.ApolloClient({
          networkInterface: Apollo.lib.createNetworkInterface({
            uri: '/graphql/home',
            transportBatching: true,
          }),
          connectToDevTools: true,
        });

        client
          .query({
            query: Apollo.gql`
              query(
                $initialCash: Decimal!,
                $initialDebt: Decimal!,
                $purchasedAt: Date!,
                $name: String!,
                $downPayment: Decimal!,
                $mortgageAmount: Decimal!,
                $interestRate: Decimal!,
                $amortizationPeriodInMonths: Int!
              ) {
                getFixedMortgagePayments(
                  initialCash: $initialCash,
                  initialDebt: $initialDebt,
                  purchasedAt: $purchasedAt,
                  name: $name,
                  downPayment: $downPayment,
                  mortgageAmount: $mortgageAmount,
                  interestRate: $interestRate,
                  amortisationPeriodInMonths: $amortizationPeriodInMonths
                ) {
                  at,
                  amount
                }
              }
            `,
            variables: {
              "initialCash": this.initialDebt,
              "initialDebt": this.initialDebt,
              "purchasedAt": this.purchasedAt.toString(),
              "name": "Fart Man",
              "downPayment": this.downPayment,
              "mortgageAmount": this.amount,
              "interestRate": this.interestRate,
              "amortizationPeriodInMonths": this.amortization
            }
          })
          .then(response => {
            render(response.data.getFixedMortgagePayments);
          });
      }
    }

    class Button extends Element {
      constructor(selector, action) {
        super(selector);

        this.getContainer().click(action);
      }
    }

    class DatePicker extends Element {
      constructor(selector, value) {
        super(selector);

        this.value = value;
      }

      render() {
        // FIXME: use the getContainer function
        this.getContainer().datepicker();
        this.getContainer().val(`${this.value.getMonth()}/${this.value.getDay()}/${this.value.getFullYear()}`);
      }

      val() {
        return new Date(this.year, this.month - 1, this.day);
      }

      toString() {
        return this.getContainer().val()
          .split("/")
          .join("-");
      }

      toArray() {
        return this.toString()
          .split("/")
          .map(v => +v);
      }

      get day() {
        return this.toArray()[1];
      }

      get month() {
        return this.toArray()[0];
      }

      get year() {
        return this.toArray()[2];
      }

      clear() {
        this.getContainer().val("");
      }
    }

    class Payments extends Element {
      constructor(selector, data) {
        super(selector);

        var data = _.map(data, item => {
          var at = item["at"]
            .split("-")
            .map(v => +v);

          return {
            "at": new Date(at[0], at[1] - 1, at[2]),
            "amount": item["amount"]
          };
        });

        this.data = _.orderBy(data, item => item["at"], "asc");
      }

      render() {
        var container = this.getContainer();

        this.data.forEach(item => {
          var id = Math.floor(Math.random() * 1000000).toString();
          var element = `
            <div id="${id}" class="payment" />
          `;
          container.append(element);

          new Payment(`.payment#${id}`, item).render();
        });
      }
    }

    class Payment extends Element {
      constructor(selector, data) {
        super(selector);

        this.data = data;
      }

      render() {
        var container = this.getContainer();
        var identifer = this.data["at"];
        var paymentElement = `
          <div class="payment">
            <h1>${this.data["at"]}</h1>

            <div class="at">
              ${this.data["at"]}
            </div>

            <div class="amount">
              ${this.data["amount"]}
            </div>
          </div>
        `;

        container.append(paymentElement);
        //
        // this
        //   .createPaymentElement(`.items#${identifer}`, item.items)
        //   .render();
      }
    }

    var inputs = new Input(".input", (results) => {
      results.clear();
      results.render();
    });
    inputs.render();

    var initValues = function() {
      $(".initial-cash input").val(100);
      $(".initial-debt input").val(50);
      $(".down-payment input").val(10000);
      $(".amount input").val(400000);
      $(".interest-rate input").val(0.0314);
      $(".amortization input").val(300);
    };

    initValues();
  })();
</script>
