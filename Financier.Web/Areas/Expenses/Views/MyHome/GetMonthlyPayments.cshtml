<link rel="stylesheet" href="~/css/Areas/Expenses/MyHome/GetMonthlyPayments.css">

<div class="expenses">
  <div class="my-home">
    <div class="input">
      <div class="initial-cash">
        Initial Cash:&nbsp;
        <input id="initial-cash" class="decimal" />
      </div>
      <div class="initial-debt">
        Initial Debt:&nbsp;
        <input id="initial-debt" class="decimal" />
      </div>
      <div class="purchased-at">
        Purchased At:&nbsp;
        <input id="purchased-at" class="day-picker" />
      </div>
      <div class="down-payment">
        Down Payment:&nbsp;
        <input id="down-payment" class="decimal">
      </div>
      <div class="amount">
        Amount:&nbsp;
        <input id="amount" class="decimal">
      </div>
      <div class="interest-rate">
        Interest Rate:&nbsp;
        <input id="interest-rate" class="decimal" />
      </div>
      <div class="amortization">
        Amortization Period (Months):&nbsp;
        <input id="amortization" class="int" />
      </div>
      <div class="comparisons">
        <div class="compare">
          <input type="button" value="Compare" />
        </div>
      </div>
      <div class="clear">
        <input type="button" value="Clear" />
      </div>
    </div>

    <div>
      <div class="results" id="fixed-rate">
      </div>

      <div class="results" id="fixed-rate-with-prepayments">
      </div>
    </div>
  </div>
</div>

<script src="~/js/jquery.min.js"></script>
<script src="~/js/jquery-ui.min.js"></script>
<script src="~/js/apollo-client.min.js"></script>
<script src="~/js/lodash.min.js"></script>

<script type="module">
  'use strict';

  import * as Elements from '/js/elements.js';
  import * as Dates from '/js/formatted_date.js';

  (function() {
    class Payments extends Elements.Element {
      constructor(selector, data) {
        super(selector);

        var data = _.map(data, item => {
          var at = item["at"]
            .split("-")
            .map(v => +v);

          return {
            "at": new Dates.FormattedDate(at[0], at[1] - 1, at[2]),
            "amount": item["amount"]
          };
        });

        this.data = _.orderBy(data, item => item["at"], "asc");
      }

      render() {
        var container = this.getContainer();

        this.data.forEach(item => {
          var id = Math.floor(Math.random() * 1000000).toString();
          var element = `
            <div id="${id}" class="payment" />
          `;
          this.appendNewChild(element);

          new Payment(`.payment#${id}`, item).render();
        });
      }
    }

    class Payment extends Elements.Element {
      constructor(selector, data) {
        super(selector);

        this.data = data;
      }

      render() {
        var container = this.getContainer();
        var identifer = this.data["at"];
        var paymentElement = `
          <div class="payment">
            <div class="at">
              ${this.data["at"].toFormatted}
            </div>

            <div class="amount">
              ${this.data["amount"].toFixed(2)}
            </div>
          </div>
        `;

        container.append(paymentElement);
        //
        // this
        //   .createPaymentElement(`.items#${identifer}`, item.items)
        //   .render();
      }
    }

    class MyForm extends Elements.Form {
      constructor(selector) {
        super(selector);

        this.purchasedAt = new Elements.DatePicker(".purchased-at input", new Date(2018, 11, 1));
      }
    }

    var form = new MyForm(".input");
    form.setSubmitButton(() => {
      var request = (name, render) => {
        var client = new Apollo.lib.ApolloClient({
          networkInterface: Apollo.lib.createNetworkInterface({
            uri: '/graphql/home',
            transportBatching: true,
          }),
          connectToDevTools: true,
        });

        client
          .query({
            query: Apollo.gql`
              query(
                $initialCash: Decimal!,
                $initialDebt: Decimal!,
                $purchasedAt: Date!,
                $name: String!,
                $downPayment: Decimal!,
                $mortgageAmount: Decimal!,
                $interestRate: Decimal!,
                $amortizationPeriodInMonths: Int!
              ) {
                ${name}(
                  initialCash: $initialCash,
                  initialDebt: $initialDebt,
                  purchasedAt: $purchasedAt,
                  name: $name,
                  downPayment: $downPayment,
                  mortgageAmount: $mortgageAmount,
                  interestRate: $interestRate,
                  amortisationPeriodInMonths: $amortizationPeriodInMonths
                ) {
                  at,
                  amount
                }
              }
            `,
            variables: {
              "initialCash": form.getInput("initial-cash").value,
              "initialDebt": form.getInput("initial-debt").value,
              "purchasedAt": form.purchasedAt.toString(),
              "name": "Fart Man",
              "downPayment": form.getInput("down-payment").value,
              "mortgageAmount": form.getInput("amount").value,
              "interestRate": form.getInput("interest-rate").value,
              "amortizationPeriodInMonths": form.getInput("amortization").value
            }
          })
          .then(response => {
            render(response.data[name]);
          });
      };
      request("getFixedMortgagePayments", (data) => {
        var results = new Payments(".results#fixed-rate", data);

        results.clear();
        results.render();
      });

      request("getFixedMortgagePaymentsWithPrepayments", (data) => {
        var results = new Payments(".results#fixed-rate-with-prepayments", data);

        results.clear();
        results.render();
      });
    });
    form.render();

    var initValues = function() {
      form.getInput("initial-cash").value = 100;
      form.getInput("initial-debt").value = 50;
      form.getInput("down-payment").value = 10000;
      form.getInput("amount").value = 400000;
      form.getInput("interest-rate").value = 0.0314;
      form.getInput("amortization").value = 300;
    };

    initValues();
  })();
</script>
