@model Financier.Web.ViewModels.Statement
@using Financier.Common.Extensions

<link href="~/css/site.css" rel="stylesheet">

<div>
  @Model.At.ToString("MMMM yyyy")
</div>

<!-- bar chart -->
<div class="charts">
  <svg class="chart" id="asset-costs">
    <h2>
      Assets
    </h2>
  </svg>
  <svg class="chart" id="expense-costs">
    <h2>
      Expenses
    </h2>
  </svg>
</div>

<link href="~/css/chart.css" rel="stylesheet">

<script src="~/js/apollo-client.min.js"></script>
<script src="~/js/d3.min.js">
</script>

<script type="text/javascript">
  'use strict';

  (function() {
    function request(year, month) {
      var client = new Apollo.lib.ApolloClient({
        networkInterface: Apollo.lib.createNetworkInterface({
          uri: '/graphql/statement',
          transportBatching: true,
        }),
        connectToDevTools: true,
      });

      client
        .query({
          query: Apollo.gql`
            {
              statement(
                year: ${year},
                month: ${month}
              ) {
                assetCosts {
                  tags {
                    name
                  }
                  amount
                }
                expenseCosts {
                  tags {
                    name
                  }
                  amount
                }
                assetAmountTotal
              }
            }
          `
        })
        .then(response => {

          new Chart(".charts #asset-costs", 420, 20)
            .render(response.data.statement.assetCosts);
          new Chart(".charts #expense-costs", 420, 20)
            .render(response.data.statement.expenseCosts);
        });
    }

    function Chart(selector, width, barHeight) {
      this.selector = selector;
      this.width = width;
      this.barHeight = barHeight;

      this.scale = function(costs) {
        var amounts = costs
          .map(x => +x.amount.toFixed())

        return d3.scaleLinear()
          .domain([0, d3.max(amounts)])
          .range([0, this.width]);
      };
    }

    Chart.prototype.render = function(costs) {
      var barChart = d3.select(this.selector)
        .attr("width", this.width)
        .attr("height", this.barHeight * costs.length);

      var bar = barChart.selectAll("g")
          .data(costs)
        .enter().append("g")
          .attr("transform", (d, i) => `translate(0, ${i * this.barHeight})`);

      var scaledValues = this.scale(costs);
      bar.append("rect")
        .attr("width", d => scaledValues(+d.amount.toFixed()))
        .attr("height", this.barHeight - 1);

      bar.append("text")
        .attr("x", d => scaledValues(+d.amount.toFixed()) - 3)
        .attr("y", this.barHeight / 2)
        .attr("dy", ".35em")
        .text(d => {
          return d.tags
            .map(tag => tag.name)
            .join(", ");
        });
    };

    request(2019, 4);
  })();
</script>

<div>
  <div>
    <h1>
      Assets:&nbsp;@(Model.GetAssetTotal())
    </h1>

    <h1>
      Expense:&nbsp;@(Model.GetExpenseTotal())
    </h1>

    <h1>
      Profit:&nbsp;@(Model.GetProfitTotal())
    </h1>
  </div>
  <div class="tag-costs">
    <h2>Assets</h2>
    @foreach (var tagCost in Model.AssetCosts.OrderBy(tc => tc.Amount))
    {
    <div class="flex-container">
      <div class="flex-item flex-tags">
        @(tagCost.Tags.Select(tag => tag.Name).Join(", "))
      </div>
      <div class="flex-item flex-amount">
        @((tagCost.Amount / Model.AssetAmountTotal).ToString("#0.00 %"))
      </div>
    </div>
    }
  </div>
  <div class="tag-costs">
    <h2>Expenses</h2>
    @foreach (var tagCost in Model.ExpenseCosts.OrderBy(tc => tc.Amount))
    {
    <div class="flex-container">
      <div class="flex-item flex-tags">
        @(tagCost.Tags.Select(tag => tag.Name).Join(", "))
      </div>
      <div class="flex-item flex-amount">
        @((tagCost.Amount / Model.ExpenseAmountTotal).ToString("#0.00 %"))
      </div>
    </div>
    }
  </div>
  <h2>Items</h2>
  @foreach (var item in Model.GetItems().OrderByDescending(item => item.Amount))
  {
    <div class="flex-container">
      <div class="flex-item flex-tags">
        @(item.Description)
      </div>
      <div class="flex-item flex-more-tags">
        @foreach (var tag in item.Tags)
        {
          <span>@(tag.Name)</span>
        }
      </div>
      <div class="flex-item flex-value">
        @(item.Amount)
      </div>
    </div>
  }
</div>
