@using Financier.Common.Extensions

<link href="~/css/site.css" rel="stylesheet">
<link href="~/css/items.css" rel="stylesheet">
<link href="~/css/MonthPicker.min.css" rel="stylesheet">
<link href="~/css/jquery-ui.min.css" rel="stylesheet">
<link href="~/css/jquery-ui.theme.min.css" rel="stylesheet">

<!-- bar chart -->
<div class="charts">
  <div class="items">
    <div class="tags">
      <div class="from-picker">
        From:&nbsp;
        <input id="from-date" class="month-picker" />
      </div>
      <div class="from-picker">
        To:&nbsp;
        <input id="to-date" class="month-picker" />
      </div>
      <div class="compare">
        <input type="button" value="Compare" />
      </div>
      <div class="clear">
        <input type="button" value="Clear" />
      </div>
      <div class="names">
      </div>
    </div>

    <svg class="chart" id="asset-costs">
    </svg>
  </div>
</div>


<script src="~/js/jquery.min.js"></script>
<script src="~/js/jquery-ui.min.js"></script>
<script src="~/js/MonthPicker.min.js"></script>
<script src="~/js/apollo-client.min.js"></script>
<script src="~/js/d3.min.js"></script>
<script src="~/js/d3-axis.min.js"></script>
</script>

<script type="text/javascript">
  'use strict';

  (function() {
    function Tags() {
      this.compareButton = $(".tags .compare");
      this.tagsContainer = $(".tags .names");
      this.names = [];
    }

    Tags.prototype.fetch = function() {
      var client = new Apollo.lib.ApolloClient({
        networkInterface: Apollo.lib.createNetworkInterface({
          uri: '/graphql/tags',
          transportBatching: true,
        }),
        connectToDevTools: true,
      });

      client
        .query({
          query: Apollo.gql`
            {
              list {
                name
              }
            }
          `
        })
        .then(response => {
          this.names = response.data.list
            .map(tag => tag.name);

          this.render();
        });
    };

    Tags.prototype.render = function() {
      this.names.forEach(name => {
        var element = `
          <div class="tag-name">
            <input id="${name}" type="checkbox" data-tag-name="${name}"></input>
            <label for="${name}">${name}</div>
          </div>
        `;

        this.tagsContainer.append(element);
      });
    };

    Tags.prototype.setup = function(renderChart) {
      this.compareButton.click(() => this.compare(renderChart));
    };

    Tags.prototype.selectedTags = function() {
      return this.tagsContainer
        .find("input:checked").toArray()
        .map(input => $(input).attr("data-tag-name"));
    };

    Tags.prototype.compare = function(renderChart) {
      renderChart(this.selectedTags());
    };

    function DateRange() {}

    DateRange.prototype.fromMonthYear = function() {
      return $("#from-date").val()
        .split("/")
        .map(v => +v);
    };

    DateRange.prototype.toMonthYear = function() {
      return $("#to-date").val()
        .split("/")
        .map(v => +v);
    };

    function Chart(selector, width, height) {
      this.margins = {
        top: 20,
        right: 30,
        bottom: 30,
        left: 40
      };

      this.selector = selector;
      this.width = width - this.margins.left - this.margins.right;
      this.height = height - this.margins.top - this.margins.bottom;
    }

    Chart.prototype.request = function(fromMonth, fromYear, toMonth, toYear, tags, render) {
      var client = new Apollo.lib.ApolloClient({
        networkInterface: Apollo.lib.createNetworkInterface({
          uri: '/graphql/item-queries',
          transportBatching: true,
        }),
        connectToDevTools: true,
      });

      var names = tags.map(name => `"${name}"`).join(", ");
      client
        .query({
          query: Apollo.gql`
          {
            monthlyExpensesByTagNames(
              tagNames: [${tags.map(name => `"${name}"`).join(", ")}],
              fromYear: ${fromYear},
              fromMonth: ${fromMonth},
              toYear: ${toYear},
              toMonth: ${toMonth}
            ) {
              year,
              month,
              amount
            }
          }
          `
        })
        .then(response => {
          render(response.data.monthlyExpensesByTagNames);
        });
    }

    Chart.prototype.xBand = function(items) {
      return d3.scaleBand()
        .domain(this.getBandLabels(items))
        .range([0, this.width]);
    };

    Chart.prototype.xScale = function(costs) {
      var amounts = costs
        .map(x => x.amount);
      var scale = d3.scaleLinear()
        .range([this.width, 0])
        .domain([d3.max(amounts, d => d), 0]);
        // .range(costs => {
        //   return 400;
        //   // var text = d.tags
        //   //   .map(tag => tag.name)
        //   //   .join(", ");
        //   //
        //   // return `${text} (${d.amount})`;
        // });

      return scale;

      // return d3.scaleLinear()
      //   .domain([0, d3.max(amounts, d => d.value)])
      //   .range([this.height, 0]);
    };

    Chart.prototype.yScale = function(costs) {
      var amounts = costs
        .map(x => x.amount)

      var scale = d3.scaleLinear()
        .range([this.height, 0])
        .domain([0, d3.max(amounts, d => d)]);

      return scale;

      // return scale(costs);

      // return d3.scaleLinear()
      //   .domain([0, d3.max(amounts, d => d.value)])
      //   .range([this.height, 0]);
    };

    Chart.prototype.xAxis = function(items) {
      return d3.axisBottom()
        .ticks(1)
        .scale(
          d3.scaleBand()
            .domain(this.getBandLabels(items))
            .range([0, this.width])
        );
    };

    Chart.prototype.getBandLabel = function(item) {
      var month = +item.month;
      if (month > 0 && month < 10) {
        month = `0${month}`;
      }

      return `${item.year}-${month}`;
    };

    Chart.prototype.getBandLabels = function(items) {
      return items.map(item => this.getBandLabel(item));
    };

    Chart.prototype.yAxis = function(selectedScale) {
      return d3.axisLeft()
        .scale(selectedScale());
        // .scale(this.yScale);
    };

    Chart.prototype.clear = function() {
      $(this.selector).empty();
    };

    Chart.prototype.render = function(costs) {
      var barWidth = this.width / costs.length;
      var barChart = d3.select(this.selector)
        .attr("width", this.width + this.margins.left + this.margins.right)
        .attr("height", this.height + this.margins.top + this.margins.bottom)
        .append("g")
          .attr("transform", `translate(${this.margins.left}, ${this.margins.top})`);

      // FIXME: just pass xScale as a value
      barChart.append("g")
        .attr("class", "x axis")
        .attr("transform", `translate(0, ${this.height})`)
        .call(this.xAxis(costs));

      // FIXME: just pass yScale as a value
      barChart.append("g")
        .attr("class", "y axis")
        // .call(s => this.yAxis((d) => { debugger; return this.yScale(costs); }));
        .call(this.yAxis(() => this.yScale(costs)));

      var bandLabels = this.getBandLabels(costs);

      // debugger;
      var bar = barChart.selectAll(".bar")
          .data(costs)
        .enter().append("rect")
          .attr("class", "bar")
          .attr("x", d => {
            var bandLabel = this.getBandLabel(d);
            return this.xBand(costs)(bandLabel);
          })
          .attr("y", d => this.yScale(costs)(d.amount))
          .attr("height", d => this.height - this.yScale(costs)(d.amount))
          .attr("width", barWidth);

        // .attr("transform", (d, i) => { /* debugger; */ return `translate(${i * barWidth}, 0)`; });

      // bar.append("rect")
      //   .attr("y", d => { /* debugger; */ return this.yScale(costs)(d.amount); })
      //   .attr("height", d => { /* debugger; */ return this.height - this.yScale(costs)(d.amount) })
      //   .attr("width", barWidth - 1);
      //
      // bar.append("text")
      //   .attr("x", barWidth / 2)
      //   .attr("y", d => this.yScale(costs)(d.amount) + 3)
      //   .attr("dy", ".75em")
      //   .text(d => {
      //     var text = d.tags
      //       .map(tag => tag.name)
      //       .join(", ");
      //
      //     return `${text} (${d.amount})`;
      //   });
    };

    (function() {
      $(".month-picker").MonthPicker({ Button: false });
      $(".month-picker#from-date").val("11/2018");
      $(".month-picker#to-date").val("10/2019");
    })();

    var tags = new Tags();
    var dates = new DateRange();
    var chart = new Chart(".charts .chart", 960, 500);

    tags.setup(tagNames => {
      var from = dates.fromMonthYear();
      var to = dates.toMonthYear();

      chart.request(from[0], from[1], to[0], to[1], tagNames, (monthlyExpensesByTagNames) => {
        chart.clear();
        chart.render(monthlyExpensesByTagNames);
      });
    });

    tags.fetch();
  })();
</script>
