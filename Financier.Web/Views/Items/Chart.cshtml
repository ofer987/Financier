@using Financier.Common.Extensions

<link href="~/css/site.css" rel="stylesheet">
<link href="~/css/items.css" rel="stylesheet">
<link href="~/css/MonthPicker.min.css" rel="stylesheet">
<link href="~/css/jquery-ui.min.css" rel="stylesheet">
<link href="~/css/jquery-ui.theme.min.css" rel="stylesheet">

<!-- bar chart -->
<div class="charts">
  <div class="items">
    <div class="input">
      <div class="date-picker">
        From:&nbsp;
        <input id="from-date" class="month-picker" />
      </div>
      <div class="date-picker">
        To:&nbsp;
        <input id="to-date" class="month-picker" />
      </div>
      <div class="comparisons">
        <div class="compare">
          <input type="button" value="Compare" />
        </div>
        <div class="detailed-compare">
          <input type="button" value="Detailed Comparison" />
        </div>
      </div>
      <div class="clear">
        <input type="button" value="Clear" />
      </div>
      <div class="tags">
      </div>
    </div>

    <div class="results">
      <svg class="chart" id="asset-costs">
      </svg>

      <div class="details">
      </div>
    </div>
  </div>
</div>

<script src="~/js/jquery.min.js"></script>
<script src="~/js/jquery-ui.min.js"></script>
<script src="~/js/MonthPicker.min.js"></script>
<script src="~/js/apollo-client.min.js"></script>
<script src="~/js/d3.min.js"></script>
<script src="~/js/d3-axis.min.js"></script>
<script src="~/js/lodash.min.js"></script>
</script>

<script type="text/javascript">
  'use strict';

  (function() {
    function Element(selector) {
      this.selector = selector;
    }

    Element.prototype.getContainer = function() {
      return $(this.selector);
    };

    Element.prototype.clear = function() {
      this.getContainer().empty();
    };

    function Input(selector, renderResults) {
      Element.call(this, selector);

      this.tags = new Tags(".tags");
      this.compareButton = new Button(".compare input", () => {
        this.request((data) => {
          var results = new Results(".results", data);
          renderResults(results);
        });
      });
      this.detailedCompareButton = new Button(".detailed-compare input", () => {
        this.request((data) => {
          var results = new DetailedResults(".results", data);
          renderResults(results);
        });
      });
      this.dates = new DateRange(".month-picker", new Date(2018, 11, 1), new Date(2019, 10, 1));
      this.clearButton = new Button(".clear input", () => {
        new Results(".results", []).clear();
      });
    }

    Input.prototype = Object.create(Element.prototype);
    Object.defineProperty(Input.prototype, 'constructor', {
      value: Input,
      enumerable: false,
      writable: true
    });

    Input.prototype.render = function() {
      // TODO: should Tags.fetch be called fetch or render?
      this.tags.fetch();
      this.dates.render();
    };

    Input.prototype.clear = function() {
      this.tags.clear();
      this.dates.clear();
    };

    Input.prototype.getTagNames = function() {
      return this.tags.selectedTags();
    };

    Input.prototype.getFromDate = function() {
      return this.dates.from();
    };

    Input.prototype.getToDate = function() {
      return this.dates.to();
    };

    Input.prototype.request = function(render) {
      var client = new Apollo.lib.ApolloClient({
        networkInterface: Apollo.lib.createNetworkInterface({
          uri: '/graphql/item-queries',
          transportBatching: true,
        }),
        connectToDevTools: true,
      });

      client
        .query({
          query: Apollo.gql`
          query($tagNames: [String!], $fromYear: Int!, $fromMonth: Int!, $toYear: Int!, $toMonth: Int!){
            monthlyExpensesByTagNames(
              tagNames: $tagNames,
              fromYear: $fromYear,
              fromMonth: $fromMonth,
              toYear: $toYear,
              toMonth: $toMonth
            ) {
              year,
              month,
              amount,
              items {
                description,
                at,
                amount
              }
            }
          }`,
          variables: {
            tagNames: this.getTagNames(),
            fromYear: this.getFromDate().getFullYear(),
            fromMonth: this.getFromDate().getMonth(),
            toYear: this.getToDate().getFullYear(),
            toMonth: this.getToDate().getMonth()
          }
        })
        .then(response => {
          render(response.data.monthlyExpensesByTagNames);
        });
    }

    function Results(selector, data) {
      Element.call(this, selector);

      this.chart = new Chart(".results .chart", 960, 500, data);
      this.details = new Details(".results .details", data);
    }

    Results.prototype = Object.create(Element.prototype);
    Object.defineProperty(Results.prototype, 'constructor', {
      value: Results,
      enumerable: false,
      writable: true
    });

    Results.prototype.render = function() {
      this.chart.render();
      this.details.render();
    };

    Results.prototype.clear = function() {
      this.chart.clear();
      this.details.clear();
    };

    function DetailedResults(selector, data) {
      Results.call(this, selector, data);

      this.chart = new Chart(".results .chart", 960, 500, data);
      this.details = new DetailedDetails(".results .details", data);
    }

    DetailedResults.prototype = Object.create(Results.prototype);
    Object.defineProperty(DetailedResults.prototype, 'constructor', {
      value: DetailedResults,
      enumerable: false,
      writable: true
    });

    function Button(selector, action) {
      Element.call(this, selector);

      this.getContainer().click(action);
    }

    Button.prototype = Object.create(Element.prototype);
    Object.defineProperty(Button.prototype, 'constructor', {
      value: Button,
      enumerable: false,
      writable: true
    });

    function Tags(selector) {
      Element.call(this, selector);

      this.compareButton = $(".input .compare");
      this.tagsContainer = $(".input .tags");
      this.names = [];
    }

    Tags.prototype = Object.create(Element.prototype);
    Object.defineProperty(Tags.prototype, 'constructor', {
      value: Tags,
      enumerable: false,
      writable: true
    });

    Tags.prototype.fetch = function() {
      var client = new Apollo.lib.ApolloClient({
        networkInterface: Apollo.lib.createNetworkInterface({
          uri: '/graphql/tags',
          transportBatching: true,
        }),
        connectToDevTools: true,
      });

      client
        .query({
          query: Apollo.gql`
            {
              list {
                name
              }
            }
          `
        })
        .then(response => {
          this.names = response.data.list
            .map(tag => tag.name);

          this.render();
        });
    };

    Tags.prototype.render = function() {
      this.names.forEach(name => {
        var element = `
          <div class="tag-name">
            <input id="${name}" type="checkbox" data-tag-name="${name}"></input>
            <label for="${name}">${name}</div>
          </div>
        `;

        this.tagsContainer.append(element);
      });
    };

    Tags.prototype.setup = function(renderChart) {
      this.compareButton.click(() => this.compare(renderChart));
    };

    Tags.prototype.selectedTags = function() {
      return this.tagsContainer
        .find("input:checked").toArray()
        .map(input => $(input).attr("data-tag-name"));
    };

    Tags.prototype.compare = function(renderChart) {
      renderChart(this.selectedTags());
    };

    Tags.prototype.clear = function() {
      $(".tags input").removeAttr("checked");
    };

    function DateRange(selector, fromDate, toDate) {
      Element.call(this, selector);

      this.initialFrom = fromDate;
      this.initialTo = toDate;
    }

    DateRange.prototype = Object.create(Element.prototype);
    Object.defineProperty(DateRange.prototype, 'constructor', {
      value: DateRange,
      enumerable: false,
      writable: true
    });

    DateRange.prototype.render = function() {
      // FIXME: use the getContainer function
      $(".month-picker").MonthPicker({ Button: false });
      $(".month-picker#from-date").val(`${this.initialFrom.getMonth()}/${this.initialFrom.getFullYear()}`);
      $(".month-picker#to-date").val(`${this.initialTo.getMonth()}/${this.initialTo.getFullYear()}`);
    };

    DateRange.prototype.from = function() {
      return new Date(this.fromMonthYear()[1], this.fromMonthYear()[0], 1);
    }

    DateRange.prototype.to = function() {
      return new Date(this.toMonthYear()[1], this.toMonthYear()[0], 1);
    }

    DateRange.prototype.fromMonthYear = function() {
      return $("#from-date").val()
        .split("/")
        .map(v => +v);
    };

    DateRange.prototype.toMonthYear = function() {
      return $("#to-date").val()
        .split("/")
        .map(v => +v);
    };

    DateRange.prototype.clear = function() {
      $(".date-picker input").val("");
    }

    function Chart(selector, width, height, data) {
      Element.call(this, selector);

      this.margins = {
        top: 20,
        right: 30,
        bottom: 30,
        left: 40
      };
      this.selector = selector;
      this.width = width - this.margins.left - this.margins.right;
      this.height = height - this.margins.top - this.margins.bottom;
      this.data = data;
    }

    Chart.prototype = Object.create(Element.prototype);
    Object.defineProperty(Chart.prototype, 'constructor', {
      value: Chart,
      enumerable: false,
      writable: true
    });

    Chart.prototype.xBand = function(items) {
      return d3.scaleBand()
        .domain(this.getBandLabels(items))
        .range([0, this.width]);
    };

    Chart.prototype.xScale = function(costs) {
      var amounts = costs
        .map(x => x.amount);
      var scale = d3.scaleLinear()
        .range([this.width, 0])
        .domain([d3.max(amounts, d => d), 0]);

      return scale;
    };

    Chart.prototype.yScale = function(costs) {
      var amounts = costs
        .map(x => x.amount)

      var scale = d3.scaleLinear()
        .range([this.height, 0])
        .domain([0, d3.max(amounts, d => d)]);

      return scale;
    };

    Chart.prototype.xAxis = function(items) {
      return d3.axisBottom()
        .ticks(1)
        .scale(
          d3.scaleBand()
            .domain(this.getBandLabels(items))
            .range([0, this.width])
        );
    };

    Chart.prototype.getBandLabel = function(item) {
      var month = +item.month;
      if (month > 0 && month < 10) {
        month = `0${month}`;
      }

      return `${item.year}-${month}`;
    };

    Chart.prototype.getBandLabels = function(items) {
      return items.map(item => this.getBandLabel(item));
    };

    Chart.prototype.yAxis = function(selectedScale) {
      return d3.axisLeft()
        .scale(selectedScale());
    };

    Chart.prototype.render = function() {
      var barWidth = this.width / this.data.length;
      var barChart = d3.select(this.selector)
        .attr("width", this.width + this.margins.left + this.margins.right)
        .attr("height", this.height + this.margins.top + this.margins.bottom)
        .append("g")
          .attr("transform", `translate(${this.margins.left}, ${this.margins.top})`);

      // FIXME: just pass xScale as a value
      barChart.append("g")
        .attr("class", "x axis")
        .attr("transform", `translate(0, ${this.height})`)
        .call(this.xAxis(this.data));

      // FIXME: just pass yScale as a value
      barChart.append("g")
        .attr("class", "y axis")
        .call(this.yAxis(() => this.yScale(this.data)));

      var bandLabels = this.getBandLabels(this.data);

      var bar = barChart.selectAll(".bar")
          .data(this.data)
        .enter().append("rect")
          .attr("class", "bar")
          .attr("x", d => {
            var bandLabel = this.getBandLabel(d);
            return this.xBand(this.data)(bandLabel);
          })
          .attr("y", d => this.yScale(this.data)(d.amount))
          .attr("height", d => this.height - this.yScale(this.data)(d.amount))
          .attr("width", barWidth);
    };

    function Details(selector, data) {
      Element.call(this, selector);
      this.selector = selector;
      this.data = _.orderBy(data, item => new Date(item.year, item.month, 1), "desc");
    }

    Details.prototype = Object.create(Element.prototype);
    Object.defineProperty(Details.prototype, 'constructor', {
      value: Details,
      enumerable: false,
      writable: true
    });

    Details.prototype.createMonth = function(selector, values) {
      return new Month(selector, values);
    };

    Details.prototype.render = function() {
      var container = this.getContainer();
      this.data.forEach(item => {
        var identifer = `${item.year}-${item.month}`;
        var monthElement = `
          <div class="month">
            <h1>${identifer}</h1>

            <div id="${identifer}" class="items">
            </div>
          </div>
        `;

        container.append(monthElement);

        this
          .createMonth(`.items#${identifer}`, item.items)
          .render();
      });
    };

    function DetailedDetails(selector, data) {
      Details.call(this, selector, data);
    }

    DetailedDetails.prototype = Object.create(Details.prototype);
    Object.defineProperty(DetailedDetails.prototype, 'constructor', {
      value: DetailedDetails,
      enumerable: false,
      writable: true
    });

    DetailedDetails.prototype.createMonth = function(selector, values) {
      return new DetailedMonth(selector, values);
    };

    function Month(selector, data) {
      Element.call(this, selector);

      this.data = _.groupBy(data, item => item.description);
    }

    Month.prototype = Object.create(Element.prototype);
    Object.defineProperty(Month.prototype, 'constructor', {
      value: Month,
      enumerable: false,
      writable: true
    });

    Month.prototype.render = function() {
      var container = this.getContainer();

      var totals = {};
      Object.keys(this.data).forEach(description => {
        var total = 0.00;
        this.data[description].forEach(item => {
          total += +item.amount;
        });

        totals[description] = {
          description: description,
          total: total
        };
      });

      _
        .orderBy(Object.values(totals), value => value.total, "desc")
        .forEach(item => {
          var html = `
            <div class="item">
              <div class="description">
                ${item.description}
              </div>
              <div class="amount">
                ${item.total.toFixed(2)}
              </div>
            </div>
          `;

          container.append(html);
        });
    };

    function DetailedMonth(selector, data) {
      Month.call(this, selector, data);

      var getDate = (string) => {
        return new Date(
          string.substr(0, 4),
          string.substr(5, 2),
          string.substr(8, 2)
        );
      };

      this.selector = selector;
      this.data = _.orderBy(data, item => getDate(item.at), "asc");
    }

    DetailedMonth.prototype = Object.create(Month.prototype);
    Object.defineProperty(DetailedMonth.prototype, 'constructor', {
      value: DetailedMonth,
      enumerable: false,
      writable: true
    });

    DetailedMonth.prototype.render = function() {
      var container = this.getContainer();
      this.data.forEach(item => {
        var html = `
          <div class="item">
            <div class="date">
              ${item.at}
            </div>
            <div class="description">
              ${item.description}
            </div>
            <div class="amount">
              ${item.amount}
            </div>
          </div>
        `;

        container.append(html);
      });
    };

    // (function() {
    //   $(".month-picker").MonthPicker({ Button: false });
    //   $(".month-picker#from-date").val("11/2018");
    //   $(".month-picker#to-date").val("10/2019");
    // })();

    var inputs = new Input(".input", (results) => {
      results.clear();
      results.render();
    });
    inputs.render();
  })();
</script>
